/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routers/__root"
import { Route as TestRouteImport } from "./routers/test"
import { Route as ProfileRouteImport } from "./routers/profile"
import { Route as NotFoundRouteImport } from "./routers/not-found"
import { Route as CollectionsRouteImport } from "./routers/collections"
import { Route as IndexRouteImport } from "./routers/index"
import { Route as LoginIndexRouteImport } from "./routers/login/index"

const TestRoute = TestRouteImport.update({
  id: "/test",
  path: "/test",
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: "/profile",
  path: "/profile",
  getParentRoute: () => rootRouteImport,
} as any)
const NotFoundRoute = NotFoundRouteImport.update({
  id: "/not-found",
  path: "/not-found",
  getParentRoute: () => rootRouteImport,
} as any)
const CollectionsRoute = CollectionsRouteImport.update({
  id: "/collections",
  path: "/collections",
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: "/login/",
  path: "/login/",
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/collections": typeof CollectionsRoute
  "/not-found": typeof NotFoundRoute
  "/profile": typeof ProfileRoute
  "/test": typeof TestRoute
  "/login": typeof LoginIndexRoute
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/collections": typeof CollectionsRoute
  "/not-found": typeof NotFoundRoute
  "/profile": typeof ProfileRoute
  "/test": typeof TestRoute
  "/login": typeof LoginIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/": typeof IndexRoute
  "/collections": typeof CollectionsRoute
  "/not-found": typeof NotFoundRoute
  "/profile": typeof ProfileRoute
  "/test": typeof TestRoute
  "/login/": typeof LoginIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/"
    | "/collections"
    | "/not-found"
    | "/profile"
    | "/test"
    | "/login"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/collections" | "/not-found" | "/profile" | "/test" | "/login"
  id:
    | "__root__"
    | "/"
    | "/collections"
    | "/not-found"
    | "/profile"
    | "/test"
    | "/login/"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CollectionsRoute: typeof CollectionsRoute
  NotFoundRoute: typeof NotFoundRoute
  ProfileRoute: typeof ProfileRoute
  TestRoute: typeof TestRoute
  LoginIndexRoute: typeof LoginIndexRoute
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/test": {
      id: "/test"
      path: "/test"
      fullPath: "/test"
      preLoaderRoute: typeof TestRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/profile": {
      id: "/profile"
      path: "/profile"
      fullPath: "/profile"
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/not-found": {
      id: "/not-found"
      path: "/not-found"
      fullPath: "/not-found"
      preLoaderRoute: typeof NotFoundRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/collections": {
      id: "/collections"
      path: "/collections"
      fullPath: "/collections"
      preLoaderRoute: typeof CollectionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/login/": {
      id: "/login/"
      path: "/login"
      fullPath: "/login"
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CollectionsRoute: CollectionsRoute,
  NotFoundRoute: NotFoundRoute,
  ProfileRoute: ProfileRoute,
  TestRoute: TestRoute,
  LoginIndexRoute: LoginIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
